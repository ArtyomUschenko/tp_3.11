from aiogram import types, Dispatcher
from date.config  import ADMIN_ID, ADMIN_IDS
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.email_sender import send_email
from utils.database import create_connection
from utils.valid_email import is_valid_email
from states import user_state
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_forwarded_message(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¢–ü.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ
    if not message.forward_from:
        await message.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM –∏ –ø–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(
        user_id=message.forward_from.id,
        user_username=message.forward_from.username,
        user_name=message.forward_from.full_name,
        forwarded_text=message.text or message.caption,  # –¢–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
        admin_id=message.from_user.id,
        admin_name=message.from_user.full_name
    )

    # # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    # cancel_keyboard = InlineKeyboardMarkup()
    # cancel_keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    # await message.answer("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_keyboard)
    # await state.set_state(SupportStates.GET_EMAIL_FORWARDED.state)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_email")
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=keyboard
    )
    await state.set_state(user_state.SupportStates.GET_EMAIL_FORWARDED.state)


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è email
async def get_forwarded_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    # –ï—Å–ª–∏ email –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    if email and not is_valid_email(email):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    await state.update_data(email=email if email else None)

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    conn = await create_connection()
    await conn.execute(
        """INSERT INTO support_requests 
        (user_id, user_username, name, email, message, admin_id, admin_name) 
        VALUES ($1, $2, $3, $4, $5, $6, $7)""",
        data['user_id'],
        data['user_username'],
        data['user_name'],
        None,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º NULL
        data['forwarded_text'],
        data['admin_id'],
        data['admin_name']
    )
    await conn.close()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_text = (
        "üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id']}\n"
        f"üìõ –ò–º—è: {data['user_name']}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{data['forwarded_text']}"
    )

    try:
        await message.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_text
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    email_text = (
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¢–ü –∑–∞–≤–µ–ª –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —á–∞—Ç.<br><br>"
        f"–ò–º—è: <b>{data['user_name']}</b><br>"
        f"Email: <b>{data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</b><br>"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{data['user_id']}</b><br>"
        f"–°—Å—ã–ª–∫–∞ –≤ tg: <b>https://t.me/{data['user_username']}</b><br>"
        f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>{data['forwarded_text']}</b><br><br>"

        f"<i>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¢–ü:</i><br>"
        f"ID: {data['admin_id']}<br>"
        f"–ò–º—è: {data['admin_name']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    send_email("–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —á–∞—Ç –ì–ò–° ‚Äú–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äú–¶–•–≠–î‚Äù", body=email_text,
               is_html=True)

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()