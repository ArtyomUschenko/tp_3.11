from aiogram import types, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.email_sender import send_email
from utils.database import create_connection
from utils.valid_email import is_valid_email
from date.config import ADMIN_ID, ADMIN_IDS, TELEGRAM_TOKEN
import logging
import os
from aiogram.utils.exceptions import TelegramAPIError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
TEMP_DIR = "temp_files"
os.makedirs(TEMP_DIR, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SupportStates(StatesGroup):
    GET_EMAIL_FORWARDED = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(*buttons):
    keyboard = InlineKeyboardMarkup(row_width=len(buttons))
    keyboard.add(*(InlineKeyboardButton(text, callback_data=data) for text, data in buttons))
    return keyboard

# –í–∞–ª–∏–¥–∞—Ü–∏—è email
def validate_email(email: str) -> bool:
    return is_valid_email(email)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_request(data: dict):
    conn = await create_connection()
    try:
        await conn.execute(
            """INSERT INTO support_requests 
            (user_id, user_username, name, email, message, admin_id, admin_name, document_path, photo_path) 
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)""",
            data.get('user_id'),
            data.get('user_username'),
            data.get('user_name'),
            data.get('email'),
            data.get('forwarded_text'),
            data.get('admin_id'),
            data.get('admin_name'),
            data.get('document_path'),
            data.get('photo_path')
        )
    finally:
        await conn.close()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def notify_admin(message: types.Message, data: dict):
    admin_text = (
        "üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id']}\n"
        f"üìõ –ò–º—è: {data['user_name']}\n"
        f"üìß Email: {data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{data['forwarded_text']}"
    )
    for admin in ADMIN_IDS:
        try:
            await message.bot.send_message(chat_id=admin, text=admin_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if data.get('document_path'):
                with open(data['document_path'], 'rb') as doc:
                    await message.bot.send_document(chat_id=admin, document=doc, caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if data.get('photo_path'):
                with open(data['photo_path'], 'rb') as photo:
                    await message.bot.send_photo(chat_id=admin, photo=photo, caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ")
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin}: {e}")
            await message.answer(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin}.")

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
def format_email_text(data: dict) -> str:
    return (
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¢–ü –∑–∞–≤–µ–ª –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —á–∞—Ç.<br><br>"
        f"–ò–º—è: <b>{data['user_name']}</b><br>"
        f"Email: <b>{data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</b><br>"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{data['user_id']}</b><br>"
        f"–°—Å—ã–ª–∫–∞ –≤ tg: <a href='https://t.me/{data['user_username']}'>https://t.me/{data['user_username']}</a><br>"
        f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>{data['forwarded_text']}</b><br><br>"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¢–ü:<br>"
        f"ID: <b>{data['admin_id']}</b><br>"
        f"–ò–º—è: <b>{data['admin_name']}</b>"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_forwarded_message(message: types.Message, state: FSMContext):
    logger.info(f"Handling forwarded message: {message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id not in ADMIN_IDS:
        logger.warning(f"User {message.from_user.id} is not an admin")
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¢–ü.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ
    if not message.forward_from and not hasattr(message, "forward_sender_name"):
        logger.warning("Message is not properly forwarded")
        await message.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º.")
        return

    logger.info("Message is properly forwarded")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = {
        "user_id": message.forward_from.id if message.forward_from else None,
        "user_username": message.forward_from.username if message.forward_from else None,
        "user_name": (
            message.forward_from.full_name if message.forward_from else message.forward_sender_name
        ),
        "forwarded_text": message.text or message.caption,
        "admin_id": message.from_user.id,
        "admin_name": message.from_user.full_name,
        "document_path": None,
        "photo_path": None
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ
    if message.document:
        user_data["document_path"] = await download_file(message.document.file_id, "document")
        logger.info(f"Document detected: {user_data['document_path']}")
    elif message.photo:
        user_data["photo_path"] = await download_file(message.photo[-1].file_id, "photo")
        logger.info(f"Photo detected: {user_data['photo_path']}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(**user_data)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=get_keyboard(("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"), ("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_email"))
    )
    await SupportStates.GET_EMAIL_FORWARDED.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
async def skip_email(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(email=None)
    await process_forwarded_request(callback.message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ email
async def get_forwarded_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if email and not validate_email(email):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(email=email)
    await process_forwarded_request(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
async def process_forwarded_request(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    await save_request(data)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await notify_admin(message, data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π
    attachments = []
    if data.get('document_path'):
        attachments.append(data['document_path'])
    if data.get('photo_path'):
        attachments.append(data['photo_path'])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
    email_text = format_email_text(data)
    send_email(
        subject="–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —á–∞—Ç –ì–ò–° ‚Äú–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äú–¶–•–≠–î‚Äù",
        body=email_text,
        is_html=True,
        attachments=attachments
    )

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=None
    )
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
bot = Bot(token=TELEGRAM_TOKEN)
async def download_file(file_id: str, file_type: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram"""
    try:
        file_path = f"{TEMP_DIR}/{file_id}_{file_type}"
        file = await bot.get_file(file_id)
        await file.download(destination_file=file_path)
        logger.info(f"File downloaded: {file_path}")
        return file_path
    except Exception as e:
        logger.error(f"File download error: {e}")
        return None


