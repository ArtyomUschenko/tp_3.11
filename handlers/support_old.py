from aiogram import types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.email_sender import send_email
from utils.valid_email import is_valid_email
from utils.database import create_connection
from date.config  import ADMIN_ID,  TELEGRAM_TOKEN, ADMIN_IDS
from states import user_state, admin_state
from keyboards import inline
from aiogram.utils.exceptions import TelegramAPIError
import logging
import datetime
import aiohttp
import os, re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
TEMP_DIR = "temp_files"
os.makedirs(TEMP_DIR, exist_ok=True)

# –¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
CONSENT_TEXT = (
    "–í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n\n"
    "[–ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö]"
    "(https://platform-eadsc.voskhod.ru/docs_back/personal_data_processing_policy.pdf)"
)
def create_consent_keyboard():
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_admin_notification(bot, user_data, user_id, username, problem,  document_path=None, photo_path=None):
    admin_text = (
        "üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üë§ –°—Å—ã–ª–∫–∞ –≤ tg: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìõ –ò–º—è: {user_data['name']}\n"
        f"üìß Email: {user_data['email']}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{problem}"
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))
    # try:
    #     await bot.send_message(ADMIN_ID, admin_text, reply_markup=keyboard)
    #     logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    # except Exception as e:
    #     logging.error(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


    for admin in ADMIN_IDS:
        try:
            await bot.send_message(chat_id=admin, text=admin_text, reply_markup=keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if document_path:
                with open(document_path, 'rb') as doc:
                    await bot.send_document(chat_id=admin, document=doc, caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if photo_path:
                with open(photo_path, 'rb') as photo:
                    await bot.send_photo(chat_id=admin, photo=photo, caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ")
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin}: {e}")



# –û—Ç–ø—Ä–∞–≤–∫–∞ email
async def send_confirmation_email(user_data, user_id, username, problem):
    email_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —á–∞—Ç.<br><br>"
        f"–ò–º—è: <b>{user_data['name']}</b><br>"
        f"Email: <b>{user_data['email']}</b><br>"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_id}</b><br>"
        f"–°—Å—ã–ª–∫–∞ –≤ tg: <b>https://t.me/{username or '–ù–µ_—É–∫–∞–∑–∞–Ω'}</b><br>"
        f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>{problem}</b>"
    )
    try:
        send_email("–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —á–∞—Ç –ì–ò–° ‚Äú–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äú–¶–•–≠–î‚Äù", body=email_text, is_html=True)
        logging.info("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î
async def save_to_database(user_id, user_data, username, problem, document_path=None, photo_path=None):
    conn = await create_connection()
    try:
        await conn.execute(
            """INSERT INTO support_requests 
            (user_id, name, user_username, email, message, document_path, photo_path) 
            VALUES ($1, $2, $3, $4, $5, $6, $7)""",
            user_id, user_data['name'], username, user_data['email'],
            problem, document_path, photo_path
        )
    finally:
        await conn.close()

# –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async def start_support(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(CONSENT_TEXT, reply_markup=create_consent_keyboard(), parse_mode=types.ParseMode.MARKDOWN)
    await state.set_state(user_state.SupportStates.GET_CONSENT.state)


async def handle_consent(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "consent_yes":
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=inline.cancel_keyboard_support())
        await state.set_state(user_state.SupportStates.GET_NAME.state)
    else:
        await cancel_handler(callback, state)
        await callback.answer()

async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=inline.get_back_cancel_keyboard())
    await state.set_state(user_state.SupportStates.GET_EMAIL.state)

async def get_email(message: types.Message, state: FSMContext):
    if not is_valid_email(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(email=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=inline.get_back_cancel_keyboard())
    await state.set_state(user_state.SupportStates.GET_MESSAGE.state)

async def get_message(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
    await state.update_data(problem=message.text)
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ?", reply_markup=inline.get_yes_no_keyboard_support())
    await state.set_state(user_state.SupportStates.GET_FILE.state)

async def handle_file_choice(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "no_support":
        await process_support_request(callback, state)
    else:
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.")
        await state.set_state(user_state.SupportStates.GET_FILE_UPLOAD.state)
    await callback.answer()


async def process_support_request(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    user_id = callback.from_user.id
    username = callback.from_user.username
    problem = user_data.get("problem")
    document_path = user_data.get("document_path")
    photo_path = user_data.get("photo_path")
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await save_to_database(user_id, user_data, username, problem, document_path, photo_path)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await send_admin_notification(
            callback.message.bot,
            user_data,
            user_id,
            username,
            problem,
            document_path,
            photo_path
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ email
        await send_confirmation_email(user_data, user_id, username, problem)

        await callback.message.edit_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        logger.error(f"Error processing request: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_handler(callback: types.CallbackQuery, state: FSMContext):
    state_mapping = {
        user_state.SupportStates.GET_EMAIL.state:
            ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", user_state.SupportStates.GET_NAME),
        user_state.SupportStates.GET_MESSAGE.state:
            ("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", user_state.SupportStates.GET_EMAIL)
    }

    current_state = await state.get_state()
    if current_state in state_mapping:
        text, new_state = state_mapping[current_state]
        await callback.message.edit_text(text, reply_markup=inline.get_back_cancel_keyboard())
        await new_state.set()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –¢–ì
async def handle_admin_reply(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    target_user_id = user_data.get("target_user_id")

    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    finally:
        await state.finish()





#
#
#
#
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
# bot = Bot(token=TELEGRAM_TOKEN)
#
# async def download_file(file_id: str, file_type: str, original_name: str = None) -> str:
#     """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º"""
#     try:
#         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
#         timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
#
#         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
#         file = await bot.get_file(file_id)
#         file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"
#
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
#         if file_type == "document" and original_name:
#             # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
#             clean_name = re.sub(r'[\\/*?:"<>|]', "", original_name)
#             base_name = f"{timestamp}_{clean_name}"
#         elif file_type == "photo":
#             # –î–ª—è —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .jpg
#             clean_name = re.sub(r'[\\/*?:"<>|]', "", original_name or f"photo_{file_id[:8]}")
#             base_name = f"{timestamp}_{clean_name}.jpg"
#         else:
#             # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ file_path, –µ—Å–ª–∏ –µ—Å—Ç—å
#             ext = os.path.splitext(file.file_path)[1] if '.' in file.file_path else ''
#             base_name = f"{file_type}_{timestamp}_{file_id[:8]}{ext}"
#
#         file_path = os.path.join(TEMP_DIR, base_name)
#
#         # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
#         async with aiohttp.ClientSession() as session:
#             async with session.get(file_url) as response:
#                 if response.status == 200:
#                     content = await response.read()
#                     with open(file_path, 'wb') as f:
#                         f.write(content)
#                     logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {file_path}")
#                     return file_path
#                 logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status}")
#         return None
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
#         return None
#
#
#
# from aiogram import types
# from aiogram.dispatcher import FSMContext
#
# async def upload_file(message: types.Message, state: FSMContext):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)
#     if message.document:
#         file_id = message.document.file_id
#         file_name = message.document.file_name
#         file_type = "document"
#     elif message.photo:
#         file_id = message.photo[-1].file_id
#         file_name = None  # –î–ª—è —Ñ–æ—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
#         file_type = "photo"
#     else:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.")
#         return
#
#     # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
#     file_path = await download_file(file_id, file_type, file_name)
#     if not file_path:
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await state.update_data(document_path=file_path)
#
#     # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏
#     await process_support_request(message, state)