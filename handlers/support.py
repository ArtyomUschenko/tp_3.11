import os
import re
import logging
import datetime
import aiohttp
from typing import Optional, Tuple
from aiogram import types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# from main import dp
from utils.email_sender import send_email
from utils.valid_email import is_valid_email
from utils.database import create_connection
from date.config import ADMIN_IDS, TELEGRAM_TOKEN
from states import user_state, admin_state
from keyboards import inline

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEMP_DIR = "temp_files"
os.makedirs(TEMP_DIR, exist_ok=True)

CONSENT_TEXT = (
    "–í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n\n"
    "[–ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö]"
    "(https://platform-eadsc.voskhod.ru/docs_back/personal_data_processing_policy.pdf)"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)


# –£—Ç–∏–ª–∏—Ç—ã
def create_consent_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö."""
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )


def sanitize_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return re.sub(r'[\\/*?:"<>|]', "_", filename)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async def save_support_request(user_id: int, user_data: dict, username: str, problem: str,
                               document_path: Optional[str] = None) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = await create_connection()
    try:
        await conn.execute(
            "INSERT INTO support_requests (user_id, name, user_username, email, message, document_path) "
            "VALUES ($1, $2, $3, $4, $5, $6)",
            user_id, user_data['name'], username, user_data['email'], problem, document_path
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        raise
    finally:
        await conn.close()


async def notify_admins(bot: Bot, user_data: dict, user_id: int, username: str, problem: str,
                        document_path: Optional[str] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    admin_text = (
        f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üë§ –°—Å—ã–ª–∫–∞ –≤ tg: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìõ –ò–º—è: {user_data['name']}\n"
        f"üìß Email: {user_data['email']}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{problem}"
    )
    keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")
    )
    for admin in ADMIN_IDS:
        try:
            await bot.send_message(admin, admin_text, reply_markup=keyboard)
            if document_path:
                with open(document_path, 'rb') as file:
                    await bot.send_document(admin, file)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")


async def send_email_confirmation(user_data: dict, user_id: int, username: str, problem: str,
                                  document_path: Optional[str] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    email_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —á–∞—Ç.<br><br>"
        f"–ò–º—è: <b>{user_data['name']}</b><br>"
        f"Email: <b>{user_data['email']}</b><br>"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_id}</b><br>"
        f"–°—Å—ã–ª–∫–∞ –≤ tg: <b>https://t.me/{username or '–ù–µ_—É–∫–∞–∑–∞–Ω'}</b><br>"
        f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>{problem}</b>"
    )
    attachments = [document_path] if document_path else None
    try:
        send_email("–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —á–∞—Ç –ì–ò–° ‚Äú–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äú–¶–•–≠–î‚Äù", body=email_text, is_html=True,
                   attachments=attachments)
        logger.info("Email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        raise


async def download_file(file_id: str, file_type: str, original_name: Optional[str] = None) -> Optional[str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    try:
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"

        if file_type == "document" and original_name:
            clean_name = sanitize_filename(original_name)
            base_name = f"{timestamp}_{clean_name}"
        elif file_type == "photo":
            clean_name = sanitize_filename(original_name or f"photo_{file_id[:8]}")
            base_name = f"{timestamp}_{clean_name}.jpg"
        else:
            ext = os.path.splitext(file.file_path)[1] if '.' in file.file_path else ''
            base_name = f"{file_type}_{timestamp}_{file_id[:8]}{ext}"

        file_path = os.path.join(TEMP_DIR, base_name)
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    content = await response.read()
                    with open(file_path, 'wb') as f:
                        f.write(content)
                    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                    return file_path
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞, —Å—Ç–∞—Ç—É—Å: {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
async def process_support_request(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_data = await state.get_data()
    user_id = message_or_callback.from_user.id
    username = message_or_callback.from_user.username
    problem = user_data.get("problem")
    document_path = user_data.get("document_path")
    bot_instance = message_or_callback.bot

    try:
        await save_support_request(user_id, user_data, username, problem, document_path)
        await notify_admins(bot_instance, user_data, user_id, username, problem, document_path)
        await send_email_confirmation(user_data, user_id, username, problem, document_path)

        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
        else:
            await message_or_callback.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(error_message)
        else:
            await message_or_callback.answer(error_message)
    finally:
        await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def start_support(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    await callback.answer()
    await callback.message.answer(CONSENT_TEXT, reply_markup=create_consent_keyboard(),
                                  parse_mode=types.ParseMode.MARKDOWN)
    await state.set_state(user_state.SupportStates.GET_CONSENT)


async def handle_consent(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if callback.data == "consent_yes":
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=inline.cancel_keyboard_support())
        await state.set_state(user_state.SupportStates.GET_NAME)
    else:
        await cancel_handler(callback, state)
    await callback.answer()


async def get_name(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=inline.get_back_cancel_keyboard())
    await state.set_state(user_state.SupportStates.GET_EMAIL)


async def get_email(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_valid_email(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(email=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=inline.get_back_cancel_keyboard())
    await state.set_state(user_state.SupportStates.GET_MESSAGE)


async def get_message(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    await state.update_data(problem=message.text)
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ?", reply_markup=inline.get_yes_no_keyboard_support())
    await state.set_state(user_state.SupportStates.GET_FILE)


async def handle_file_choice(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Ñ–∞–π–ª–∞."""
    if callback.data == "no_support":
        await process_support_request(callback, state)
    else:
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.")
        await state.set_state(user_state.SupportStates.GET_FILE_UPLOAD)
    await callback.answer()


async def upload_file(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GET_FILE_UPLOAD –æ—Ç {message.from_user.id}")

    if message.document:
        file_id, file_type, original_name = message.document.file_id, "document", message.document.file_name
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {original_name}")
    elif message.photo:
        file_id, file_type, original_name = message.photo[-1].file_id, "photo", None
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ")
    else:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ: {message.content_type}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.")
        return

    file_path = await download_file(file_id, file_type, original_name)
    if not file_path:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(document_path=file_path)
    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø—É—Ç—å: {file_path}, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
    await process_support_request(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_admin_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    action, data = callback.data.split("_")
    if action == "reply":
        await state.update_data(target_user_id=data)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        await admin_state.AdminStates.WAITING_FOR_REPLY.set()
    elif action == "view":
        await callback.answer("–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –∑–¥–µ—Å—å", show_alert=True)
    await callback.answer()


async def handle_admin_reply(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_data = await state.get_data()
    target_user_id = user_data.get("target_user_id")
    try:
        await message.bot.send_message(target_user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    finally:
        await state.finish()


# –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def back_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
    state_mapping = {
        user_state.SupportStates.GET_EMAIL: ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", user_state.SupportStates.GET_NAME),
        user_state.SupportStates.GET_MESSAGE: ("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", user_state.SupportStates.GET_EMAIL)
    }
    current_state = await state.get_state()
    if current_state in state_mapping:
        text, new_state = state_mapping[current_state]
        await callback.message.edit_text(text, reply_markup=inline.get_back_cancel_keyboard())
        await new_state.set()
    await callback.answer()


async def cancel_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è."""
    await state.finish()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    await callback.answer()
