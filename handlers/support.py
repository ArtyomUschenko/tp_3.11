from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.email_sender import send_email
from utils.valid_email import is_valid_email
from utils.database import create_connection
from date.config  import ADMIN_ID, ADMIN_IDS
from states import user_state, admin_state
from keyboards import inline
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async def start_support(message: types.Message, state: FSMContext):
    consent_keyboard = InlineKeyboardMarkup(row_width=2)
    consent_keyboard.add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )

    # –¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    text = (
        "–í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n\n"
        "[–ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://platform-eadsc.voskhod.ru/docs_back/personal_data_processing_policy.pdf)"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await message.answer(text, reply_markup=consent_keyboard, parse_mode=types.ParseMode.MARKDOWN)
    await state.set_state(user_state.SupportStates.GET_CONSENT.state)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def handle_consent(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "consent_yes":
        cancel_keyboard = InlineKeyboardMarkup(row_width=1)
        cancel_keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=cancel_keyboard)
        await state.set_state(user_state.SupportStates.GET_NAME.state)

    elif callback.data == "cancel":
        await state.finish()
        await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await callback.answer()

async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = inline.get_back_cancel_keyboard()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=keyboard)
    await state.set_state(user_state.SupportStates.GET_EMAIL.state)

async def get_email(message: types.Message, state: FSMContext):
    if not is_valid_email(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(email=message.text)
    keyboard = inline.get_back_cancel_keyboard()
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=keyboard)
    await state.set_state(user_state.SupportStates.GET_MESSAGE.state)


    username = message.from_user.username

async def get_message(message: types.Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username

    user_data = await state.get_data()
    username = username
    name = user_data.get("name")
    email = user_data.get("email")
    problem = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = await create_connection()
    await conn.execute(
        "INSERT INTO support_requests (user_id, name, user_username, email, message) VALUES ($1, $2, $3, $4, $5)",
        message.from_user.id,  name, username, email, problem
    )
    await conn.close()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_text = (
        "üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üë§ –°—Å—ã–ª–∫–∞ –≤ tg: @{username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìõ –ò–º—è: {name}\n"
        f"üìß Email: {email}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{problem}"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(
            "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
            callback_data=f"reply_{user_id}"
        )
    )

    try:
        await message.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_text,
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    email_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —á–∞—Ç.<br><br>"
        f"–ò–º—è: <b>{name}</b><br>"
        f"Email: <b>{email}</b><br>"
        f"–°—Å—ã–ª–∫–∞ –≤ tg: <b>https://t.me/{username if username else '–ù–µ_—É–∫–∞–∑–∞–Ω'}</b><br>"
        f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>{problem}</b>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    send_email("–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —á–∞—Ç –ì–ò–° ‚Äú–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äú–¶–•–≠–î‚Äù", body=email_text,
    is_html=True)

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.finish()


# ///////////–ö–Ω–æ–ø–∫–∏\\\\\\\\\

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_handler(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == user_state.SupportStates.GET_EMAIL.state:
        keyboard = inline.get_back_cancel_keyboard()
        await state.set_state(user_state.SupportStates.GET_NAME.state)
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)
    elif current_state == user_state.SupportStates.GET_MESSAGE.state:
        keyboard = inline.get_back_cancel_keyboard()
        await state.set_state(user_state.SupportStates.GET_EMAIL.state)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=keyboard)
    await callback.answer()







# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
async def start_support_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç callback answer: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    consent_keyboard = InlineKeyboardMarkup(row_width=2)
    consent_keyboard.add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )

    # –¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    text = (
        "–í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n\n"
        "[–ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://platform-eadsc.voskhod.ru/docs_back/personal_data_processing_policy.pdf)"
    )


    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    await callback.message.answer(text, reply_markup=consent_keyboard, parse_mode=types.ParseMode.MARKDOWN)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ GET_NAME –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    await state.set_state(user_state.SupportStates.GET_CONSENT.state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
async def skip_email(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(email=None)
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await process_forwarded_request(callback.message, state)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

async def process_forwarded_request(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –±–µ–∑ email
    conn = await create_connection()
    await conn.execute(
        """INSERT INTO support_requests 
        (user_id, user_username, name, message, admin_id, admin_name) 
        VALUES ($1, $2, $3, $4, $5, $6)""",
        data['user_id'],
        data['user_username'],
        data['user_name'],
        data['forwarded_text'],
        data['admin_id'],
        data['admin_name']
    )
    await conn.close()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_text = (
        "üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id']}\n"
        f"üìõ –ò–º—è: {data['user_name']}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{data['forwarded_text']}"
    )

    try:
        await message.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_text
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    email_text = (
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¢–ü –∑–∞–≤–µ–ª –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —á–∞—Ç.<br><br>"
        f"–ò–º—è: <b>{data['user_name']}</b><br>"
        f"Email: <b>{data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</b><br>"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{data['user_id']}</b><br>"
        f"–°—Å—ã–ª–∫–∞ –≤ tg: <b>https://t.me/{data['user_username']}</b><br>"
        f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>{data['forwarded_text']}</b><br><br>"

        f"<i>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¢–ü:</i><br>"
        f"ID: {data['admin_id']}<br>"
        f"–ò–º—è: {data['admin_name']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    send_email("–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —á–∞—Ç –ì–ò–° ‚Äú–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äú–¶–•–≠–î‚Äù", body=email_text,
               is_html=True)

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.finish()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def handle_admin_callback(callback: types.CallbackQuery, state: FSMContext):
    action, data = callback.data.split("_")

    if action == "reply":
        await state.update_data(target_user_id=data)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        await admin_state.AdminStates.WAITING_FOR_REPLY.set()

    elif action == "view":
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î
        await callback.answer("–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –∑–¥–µ—Å—å", show_alert=True)

    await callback.answer()

async def handle_admin_reply(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    target_user_id = user_data.get("target_user_id")

    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

    await state.finish()




